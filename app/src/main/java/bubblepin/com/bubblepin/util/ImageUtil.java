package bubblepin.com.bubblepin.util;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.CursorLoader;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Environment;
import android.provider.DocumentsContract;
import android.provider.MediaStore;

import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.Date;

public class ImageUtil {

    private Context context;
    private File file;

    public ImageUtil(Context context) {
        this.context = context;
    }

    /**
     * Especially used when capturing an image from camera, it will generate
     * a new JPG file into SD card public directory, the name is generated by
     * its creation date and time with the "IMG_BUBBLEPIN_" prefix
     *
     * @return generated image file
     */
    public File generateImageFile() {
        String imageFileName = generateImageFileName();
        File storageDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);
        File image = new File(storageDir, imageFileName);
        file = image;
        return image;
    }

    /**
     * The file name is generated with prefix "IMG_BUBBLEPIN_", current date
     * and time and suffix ".jpg"
     */
    public String generateImageFileName() {
        String timeStamp = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
        return "IMG_BUBBLEPIN_" + timeStamp + ".jpg";
    }

    /**
     * get current generated image file
     *
     * @return current image file
     */
    public File getImageFile() {
        return file;
    }

    // the code below copied from online
    /**
     * Public tool method to get the real path by given specific URI, notice that
     * different SDK version may cause different ways to parse the URI, so here
     * should also pass current specific SDK version and the context
     *
     * @param sdk_version SDK version of current device
     * @param uri         URI that want to be parsed
     * @return specific real path string from given URI
     */
    public String getRealPathFromURI(int sdk_version, Uri uri) {
        if (sdk_version < 11) {
            return getRealPathFromURI_BelowAPI11(uri);
        } else if (sdk_version < 19) {
            return getRealPathFromURI_API11to18(uri);
        } else {
            return getRealPathFromURI_API19(uri);
        }
    }

    @SuppressLint("NewApi")
    private String getRealPathFromURI_API19(Uri uri) {
        String filePath = "";
        String wholeID = DocumentsContract.getDocumentId(uri);

        // Split at colon, use second item in the array
        String id = wholeID.split(":")[1];

        String[] column = {MediaStore.Images.Media.DATA};

        // where id is equal to
        String sel = MediaStore.Images.Media._ID + "=?";

        Cursor cursor = context.getContentResolver().query(
                MediaStore.Images.Media.EXTERNAL_CONTENT_URI, column, sel,
                new String[]{id}, null);

        int columnIndex = cursor.getColumnIndex(column[0]);

        if (cursor.moveToFirst()) {
            filePath = cursor.getString(columnIndex);
        }
        cursor.close();
        return filePath;
    }

    @SuppressLint("NewApi")
    private String getRealPathFromURI_API11to18(Uri contentUri) {
        String[] proj = {MediaStore.Images.Media.DATA};
        String result = null;

        CursorLoader cursorLoader = new CursorLoader(context, contentUri, proj,
                null, null, null);
        Cursor cursor = cursorLoader.loadInBackground();

        if (cursor != null) {
            int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
            cursor.moveToFirst();
            result = cursor.getString(column_index);
        }
        return result;
    }

    private String getRealPathFromURI_BelowAPI11(Uri contentUri) {
        String[] proj = {MediaStore.Images.Media.DATA};
        Cursor cursor = context.getContentResolver().query(contentUri, proj,
                null, null, null);
        int column_index = cursor
                .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
        cursor.moveToFirst();
        return cursor.getString(column_index);
    }
}
